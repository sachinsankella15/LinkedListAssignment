#include <iostream>
#include <sstream>
using namespace std;

struct Node {
    int row;
    int col;
    int value;
    Node* next;

    Node(int r, int c, int v) : row(r), col(c), value(v), next(nullptr) {}
};

class SparseMatrix {
private:
    Node* head; 

public:
    SparseMatrix() : head(nullptr) {}

    ~SparseMatrix() {
        Node* temp;
        while (head) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }

    void insert(int row, int col, int value) {
        if (value == 0) return; 

        Node* newNode = new Node(row, col, value);
        if (!head) {
            head = newNode; 
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next; 
            }
            temp->next = newNode; 
        }
    }

    void display() const {
        if (!head) {
            cout << "The sparse matrix is empty." << endl;
            return;
        }

        Node* temp = head;
        cout << "Row indexes: ";
        while (temp) {
            cout << temp->row << " ";
            temp = temp->next;
        }
        cout << endl;

        temp = head;
        cout << "Column indexes: ";
        while (temp) {
            cout << temp->col << " ";
            temp = temp->next;
        }
        cout << endl;

        temp = head;
        cout << "Values: ";
        while (temp) {
            cout << temp->value << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SparseMatrix matrix;
    int rows, cols;

    cout << "Enter the number of rows: ";
    cin >> rows;

    cout << "Enter the number of columns: ";
    cin >> cols;

    cin.ignore(); 

    cout << "Enter the elements of the matrix row by row:" << endl;
    for (int i = 0; i < rows; i++) {
        string rowInput;
        getline(cin, rowInput);
        stringstream ss(rowInput);
        int value;
        for (int j = 0; j < cols; j++) {
            ss >> value;
            matrix.insert(i, j, value); 
        }
    }

    cout << "\nSparse Matrix Representation:" << endl;
    matrix.display();

    return 0;
}
